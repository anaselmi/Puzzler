from tdl.event import Event, KeyDown, KeyUp
from consts import *
from typing import Union

# Name/key of the keyword argument used to pass functions/methods a command.
KEY_KWARGS = "command"
# Used by TDL to signal the type of input generated. Also used by commands to determine command based on input.
QUIT = "QUIT"
KEYDOWN = "KEYDOWN"
KEYUP = "KEYUP"
# Strings used as keys by commands. Defined as constants so they cannot be mispelled by user code.
KEY_VALUE = "value"
KEY_ENTER = "enter"
KEY_EXIT = "exit"
KEY_RETURN = "return"
KEY_LOOK = "look"
KEY_CONSUMED = "consumed"
KEY_MOVE = "move"


# Commands.
ENTER = {KEY_ENTER: True}
EXIT = {KEY_EXIT: True}
RETURN = {KEY_RETURN: True}
LOOK = {KEY_LOOK: True}
CONSUMED = {KEY_CONSUMED: True}

MOVE_N = {KEY_MOVE: (0, -1)}
MOVE_S = {KEY_MOVE: (0, 1)}
MOVE_E = {KEY_MOVE: (1, 0)}
MOVE_W = {KEY_MOVE: (-1, 0)}
MOVE_NE = {KEY_MOVE: (1, -1)}
MOVE_NW = {KEY_MOVE: (-1, -1)}
MOVE_SE = {KEY_MOVE: (1, 1)}
MOVE_SW = {KEY_MOVE: (-1, 1)}


# Commands dictionaries. Used to map inputs to commands.
COMS_PLAY_KEYDOWN = {
    "ENTER": ENTER,
    "ESCAPE": ENTER,
    "l": LOOK,

    "KP8": MOVE_N,
    "UP": MOVE_N,
    "KP2": MOVE_S,
    "DOWN": MOVE_S,
    "KP4": MOVE_W,
    "LEFT": MOVE_W,
    "KP6": MOVE_E,
    "RIGHT": MOVE_E,
    "KP9": MOVE_NE,
    "KP7": MOVE_NW,
    "KP3": MOVE_SE,
    "KP1": MOVE_SW,
}

COMS_PLAY_KEYUP = {}

COMS_PLAY = {"KEYDOWN": COMS_PLAY_KEYDOWN, "KEYUP": COMS_PLAY_KEYUP}


def get_command(event, event_map: dict) -> dict:
    """Creates a command based on player input from a dictionary of controls.

    :param event: The original input event generated by TDL.
    :param event_map: A mapping of input events to commands.
    :return: The command mapped to that input, or an empty command if none is found.
    """
    event_type = event.type
    if event_type == "QUIT":
        return EXIT
    elif event_type == "KEYDOWN" or event_type == "KEYUP":
        return event_map.get(event_type, {}).get(event.key, {})
    return {}


def update_command(argument: dict, result: dict) -> dict:
    """Generates a new command based on an input and output command, also known as argument and result.

    Notes:
        None is not a valid command, and should not be used as an argument. Use an empty dictionary instead.

    :param dict argument: The original command received by the function.
    :param dict result: The command returned by the function.
    :return dict: The new command based off the argument and result.
                  If result is None or an empty command, argument will be returned.
                  If result is a consumed command, an empty command will be returned.
                  If result is any other command, result is returned.
    """
    # Argument has been ignored.
    if result == {}:
        return argument
    # Argument has been consumed.
    if result.get(KEY_CONSUMED):
        return {}
    # A new command has been generated.
    else:
        return result


def update_result(func):
    """Changes the return value of functions that handle and return commands.

    :param func: Function to be wrapped. Must have a keyword argument called command.
    Must return Union[dict, None].
    :return: Modified function that returns the next logical command based on context.
    """

    def wrapper(*args, **kwargs):
        command = kwargs.get(KEY_KWARGS)
        if command is None:
            raise ValueError("Command must be passed as a keyword argument")
        result = func(*args, **kwargs)
        if result is None:
            result = {}
        if not isinstance(result, dict):
            raise TypeError("The function did not return Union[dict, None]")
        return update_command(argument=command, result=result)
    return wrapper
